<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:control="http://www.ayjs.net/controls"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
     xmlns:shared="clr-namespace:AYQQMGR2018.Views.Shared"
                    xmlns:ayi="http://www.ayjs.net/behavior"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!--颜色资源 Start-->
    <SolidColorBrush x:Key="QQ.ToolBox.Left.Static.Brush" Color="#CCFFFFFF"/>
    <SolidColorBrush x:Key="QQ.ToolBox.Left.Check.Brush" Color="#E5FFFFFF"/>
    <SolidColorBrush x:Key="QQ.ToolBox.Left.Border.Brush" Color="#B2FFFFFF"/>


    <Style TargetType="{x:Type TextBlock }" x:Key="BaseTextBlock">
        <Setter Property="FontFamily" Value="/AYQQMGR2018;component/Resources/#FZLanTingHeiS-UL-GB"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="Foreground" Value="#72727F"/>
    </Style>

    <!--颜色资源 SeND-->
    <Style x:Key="QQFont">
        <Setter Property="TextElement.FontFamily" Value="/AYQQMGR2018;component/Resources/#FZLanTingHeiS-UL-GB" />
        <Setter Property="TextElement.FontSize" Value="12" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
    </Style>
    <!--ay 导航按钮样式 start-->
    <Style x:Key="AyQQMgrNavStyle" TargetType="{x:Type control:AyNavRadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#F4F6FC"/>
        <Setter Property="Foreground" Value="#72727F"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="AyQQNavEnterAction">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="img_Checked">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="48"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="img_Checked">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="48"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="img_Static">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="img_Hover">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="img_Checked">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="AyQQNavExitAction">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="img_Checked">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="img_Checked">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="img_Static">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.11" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="img_Hover">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="img_Checked">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.11" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="AyQQNavBgEllipse">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="bgEllipseHover">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="bgEllipseHover">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-34"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="bgEllipseHover">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="bgEllipseHover">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>


                        </Storyboard>
                        <Storyboard x:Key="AyQQNavBgEllipseExit">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="bgEllipseHover">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="bgEllipseHover">
                                <EasingDoubleKeyFrame KeyTime="0" Value="-56"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="bgEllipseHover">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="bgEllipseHover">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border ClipToBounds="True" x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid >
                            <Ellipse x:Name="bgEllipseHover" Visibility="Collapsed" Fill="#E5E7F1" RenderTransformOrigin="0.5,0.5" Margin="-25,0,-21,-97">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Grid x:Name="templateRoot"   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                <StackPanel Orientation="Horizontal">
                                    <Grid Width="48" Height="48">
                                        <Image  x:Name="img_Static" Visibility="Visible" Source="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}"  Width="48" Height="48" VerticalAlignment="Center"></Image>
                                        <Image  x:Name="img_Hover" Visibility="Collapsed" Source="{Binding Path=HoverIcon, RelativeSource={RelativeSource TemplatedParent}}" Width="48" Height="48" VerticalAlignment="Center"></Image>
                                        <Image  x:Name="img_Checked" Visibility="Collapsed" Source="{Binding Path=PressedIcon, RelativeSource={RelativeSource TemplatedParent}}"  Width="0" Height="0"></Image>
                                    </Grid>
                                    <ContentPresenter  x:Name="contentPresenter" Grid.Column="1" Focusable="False" VerticalAlignment="Center"/>
                                </StackPanel>
                            </Grid>

                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="AyQQNavBgEllipseExit_BeginStoryboard" Storyboard="{StaticResource AyQQNavBgEllipseExit}"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AyQQNavBgEllipse_BeginStoryboard" Storyboard="{StaticResource AyQQNavBgEllipse}"/>
                            </Trigger.EnterActions>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#3344D8"/>
                            <Setter Property="Visibility" TargetName="img_Hover" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="img_Static" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="img_Checked" Value="Collapsed"/>


                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#3344D8"/>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="AyQQNavExitAction_BeginStoryboard" Storyboard="{StaticResource AyQQNavExitAction}"/>
                            </Trigger.ExitActions>

                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AyQQNavEnterAction_BeginStoryboard" Storyboard="{StaticResource AyQQNavEnterAction}"/>
                            </Trigger.EnterActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ay 导航按钮样式 end-->

    <!--按钮-->
    <Color x:Key="QQExeButton.Static.Brush" >#FF00C37D</Color>
    <Color x:Key="QQExeButton.Hover.Brush" >#00E095</Color>
    <Color x:Key="QQExeButton.Peessed.Brush">#00B173</Color>


    <Style x:Key="QQExeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#FF00C37D"/>

        <Setter Property="BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="FontFamily" Value="/AYQQMGR2018;component/Resources/#FZLanTingHeiS-UL-GB" />
        <Setter Property="FontSize" Value="28" />
        <Setter Property="FontWeight" Value="UltraLight" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="UseLayoutRounding" Value="true"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"  BorderThickness="0"  SnapsToDevicePixels="True" Background="#FF00C37D" >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{StaticResource QQExeButton.Hover.Brush}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{StaticResource QQExeButton.Peessed.Brush}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="contentPresenter">

                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="contentPresenter">

                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="QQExeButtonStyleNoMove" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#FF00C37D"/>
        <Setter Property="BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="FontFamily" Value="/AYQQMGR2018;component/Resources/#FZLanTingHeiS-UL-GB" />
        <Setter Property="FontSize" Value="28" />
        <Setter Property="FontWeight" Value="UltraLight" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="UseLayoutRounding" Value="true"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"  BorderThickness="0"  SnapsToDevicePixels="True" Background="#FF00C37D" >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{StaticResource QQExeButton.Hover.Brush}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{StaticResource QQExeButton.Peessed.Brush}"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                        </ContentPresenter>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="QQExeSplitButton" TargetType="{x:Type control:AySplitButton}">
        <Style.Resources>
            <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
                <Style.Resources>
                    <!-- TopLevelItem  菜单中的根级menuitem，且这个menuitem没有子级菜单-->
                    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
                        <Border Name="Border" Background="#D800C27B" BorderThickness="0,1,0,0" BorderBrush="#04A46B">
                            <ContentPresenter Name="HeaderHost" Margin="21,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left"  ContentSource="Header" RecognizesAccessKey="False"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--选中菜单项时的高亮颜色的trigger设置-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#FF00C27B"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <!-- MenuItem Style -->
                    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Height" Value="39"/>
                        <Setter Property="MinWidth" Value="179"/>
                        <Style.Triggers>

                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                </Style.Resources>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property ="Focusable" Value="False"/>
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="HasDropShadow" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Grid Margin="0">
                                <Border Name="Border" Background="#00FFFFFF" Padding="0"  BorderThickness="0" >
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"></StackPanel>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#FF00C37D"/>
        <Setter Property="BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="FontFamily" Value="/AYQQMGR2018;component/Resources/#FZLanTingHeiS-UL-GB" />
        <Setter Property="FontSize" Value="28" />
        <Setter Property="FontWeight" Value="UltraLight" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="UseLayoutRounding" Value="true"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:AySplitButton}">

                    <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{StaticResource QQExeButton.Hover.Brush}"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0:0:0.2" Value="{StaticResource QQExeButton.Peessed.Brush}"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="contentPresenter">

                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="contentPresenter">

                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->

                    <Grid Background="Transparent" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="0" x:Name="col0"/>
                        </Grid.ColumnDefinitions>
                        <Button Style="{StaticResource QQExeButtonStyle}" BorderThickness="0">
                            <Border x:Name="border">
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="true" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ContentPresenter.RenderTransform>
                                </ContentPresenter>
                            </Border>
                        </Button>
                        <Border x:Name="splitBorder"  BorderThickness="1,0,0,0" BorderBrush="#00AE6B"  Grid.Column="1">
                            <Grid>
                                <Viewbox x:Name="vbsanjiao" Margin="6,0,6,0" Visibility="{TemplateBinding SanJiaoVisibility}"  Width="27">
                                    <Path x:Name="path" Data="M325.875,154.625 C328.02083,156.77083 330.16667,158.91667 332.3125,161.0625 L339.00052,154.37448" Width="15" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center"  Fill="Transparent"  Stroke="White" StrokeThickness="1.5"/>
                                </Viewbox>
                                <Button Style="{StaticResource QQExeButtonStyleNoMove}" x:Name="PART_DropDown" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Stretch" Margin="0"
                                    Width="27" HorizontalAlignment="Stretch"  Opacity="{TemplateBinding  SanJiaoBorderOpacity}" >
                                    <Viewbox Margin="6,0,6,0" >
                                        <Path  Data="M325.875,154.625 C328.02083,156.77083 330.16667,158.91667 332.3125,161.0625 L339.00052,154.37448" Width="15" HorizontalAlignment="Center" Stretch="Fill" VerticalAlignment="Center"  Fill="Transparent"  Stroke="White" StrokeThickness="1.5"/>
                                    </Viewbox>
                                </Button>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ElementName=vbsanjiao,Path=Visibility}" Value="Visible">
                            <Setter Property="Width" TargetName="col0" Value="27"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" SourceName="PART_DropDown" Value="true">
                            <Setter Property="Opacity" TargetName="PART_DropDown" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <Style x:Key="AyQQMgrToolBoxNavStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="92"/>
        <Setter Property="Height" Value="61"/>
        <Setter Property="Foreground" Value="#72727F"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="61"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="radioButtonBorder" Background="{StaticResource QQ.ToolBox.Left.Static.Brush}"
                            BorderBrush="{DynamicResource QQ.ToolBox.Left.Border.Brush}" BorderThickness="0,0,1,0" UseLayoutRounding="True" SnapsToDevicePixels="True">
                        <Grid x:Name="templateRoot"   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Label x:Name="selectPoint" Visibility="Hidden" Foreground="{TemplateBinding Foreground}" FontSize="9" Margin="0,0,2,0">●</Label>
                                <ContentPresenter TextElement.FontSize="{TemplateBinding FontSize}" x:Name="contentPresenter" Focusable="False" VerticalAlignment="Center"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#BFFFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource QQ.ToolBox.Left.Check.Brush}"/>
                            <Setter Property="BorderThickness" TargetName="radioButtonBorder" Value="0,1,0,1"/>

                            <Setter Property="Visibility" TargetName="selectPoint" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="{x:Type shared:AyToolBoxRightButton}" TargetType="{x:Type shared:AyToolBoxRightButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="83"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Background="#00FFFFFF">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="grid">
                                            <EasingColorKeyFrame KeyTime="0" Value="#33666666"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="grid">
                                            <EasingColorKeyFrame KeyTime="0" Value="#4C666666"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <StackPanel x:Name="border"  HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                            <StackPanel.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </StackPanel.RenderTransform>
                            <control:AyIconAll Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" IsBitmapImage="True" Width="40" Height="40"/>
                            <ContentPresenter TextElement.Foreground="#72727F" x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="true"/>
                        <Trigger Property="IsPressed" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WindowTrayBarButton" TargetType="{x:Type shared:AyToolBoxRightButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="96"/>
        <Setter Property="Height" Value="89"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Background="#00FFFFFF">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="grid">
                                            <EasingColorKeyFrame KeyTime="0" Value="#D4E3F7"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="grid">
                                            <EasingColorKeyFrame KeyTime="0" Value="#D4E3F7"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <StackPanel x:Name="border"  HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                            <StackPanel.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </StackPanel.RenderTransform>
                            <control:AyIconAll x:Name="static1" Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" IsBitmapImage="True" Width="29" Height="29" Visibility="Visible" HorizontalAlignment="Center"/>
                            <control:AyIconAll x:Name="static2" Icon="{Binding Path=HoverIcon, RelativeSource={RelativeSource TemplatedParent}}" IsBitmapImage="True" Width="29" Height="29" Visibility="Collapsed" HorizontalAlignment="Center"/>
                            <ContentPresenter Margin="0,9,0,0" TextElement.Foreground="#323232" x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="static1" Property="Visibility" Value="Collapsed"></Setter>
                            <Setter TargetName="static2" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NuclearScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Style.Resources>

            <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="HoverOn">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.9"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="HoverOff">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.5"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="PressedOn">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.9"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="PressedOff">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.5"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid Margin="0,0,0,0" x:Name="Grid">
                                <Rectangle HorizontalAlignment="Stretch" x:Name="HoverRectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="4" Stroke="{x:Null}"  Opacity="0.5" MinHeight="10">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="#70747B" />
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle HorizontalAlignment="Stretch" x:Name="PressedRectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="4" Stroke="{x:Null}"  Opacity="0.5" MinHeight="10">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="#70747B" />
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsFocused" Value="True" />
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                                    </Trigger.EnterActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False" >
                                    <Setter Property="Opacity" TargetName="Grid" Value="0.5"/>
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="QQ.AyScrollBarStyle" TargetType="{x:Type ScrollBar}">
                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>

                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="7"/>
                <Setter Property="MinWidth" Value="12"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Margin="2,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="18" />
                                    <RowDefinition Height="0.00001*" />
                                    <RowDefinition MaxHeight="18" />
                                </Grid.RowDefinitions>


                                <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                                    </Track.Thumb>
                                </Track>

                            </Grid>
                            <ControlTemplate.Triggers>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </Style>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource QQ.AyScrollBarStyle}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Ay.QQ.RadioButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <!--<ControlTemplate.Resources>
                        <Storyboard x:Key="CheckedStory">
                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ToggleButton.IsChecked)" >
                                <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                            </BooleanAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="UnCheckedStory">
                            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(ToggleButton.IsChecked)">
                                <DiscreteThicknessKeyFrame KeyTime="0:0:0" Value="False"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>-->
                    <Border x:Name="border" Background="#00FFFFFF">
                        <Grid>
                            <control:AyImageButton x:Name="Checked"  Height="17" Width="34"  RenderMode="Manner" Icon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioCheck1.png"   IsEnabled="{Binding IsEnabled,RelativeSource={RelativeSource TemplatedParent}}"
                                           DisabledIcon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioCheck1.png"
                                           HoverIcon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioCheck2.png" Visibility="Visible"
                                           PressedIcon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioCheck3.png">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <ayi:SetBoolPropertyAction PropertyName="IsChecked" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ToggleButton},Mode=FindAncestor}}" PropertyValue="false"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </control:AyImageButton>
                            <control:AyImageButton x:Name="UnChecked"  Height="17" Width="34"  Visibility="Collapsed"
                               RenderMode="Manner" Icon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioUnCheck1.png" IsEnabled="{Binding IsEnabled,RelativeSource={RelativeSource TemplatedParent}}"
                                           DisabledIcon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioUnCheck1.png"
                                           HoverIcon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioUnCheck2.png"
                                           PressedIcon="pack://application:,,,/AYQQMGR2018;component/Resources/check/radioUnCheck3.png">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Click">
                                        <ayi:SetBoolPropertyAction PropertyName="IsChecked" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type ToggleButton},Mode=FindAncestor}}" PropertyValue="true"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </control:AyImageButton>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<EventTrigger RoutedEvent="ButtonBase.Click" SourceName="Checked">
                            <setter    
                         </EventTrigger>-->
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="UnChecked" Property="Visibility" Value="Visible"></Setter>
                            <Setter TargetName="Checked" Property="Visibility" Value="Collapsed"></Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowTrayBarButtonLastLine" TargetType="{x:Type shared:AyToolBoxRightButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="61"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Background="#00FFFFFF">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <StackPanel x:Name="border"  HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                            <StackPanel.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </StackPanel.RenderTransform>
                            <control:AyIconAll x:Name="static1" Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" IsBitmapImage="True" Width="15" Height="15" Visibility="Visible" VerticalAlignment="Center"/>
                            <control:AyIconAll x:Name="static2" Icon="{Binding Path=HoverIcon, RelativeSource={RelativeSource TemplatedParent}}" IsBitmapImage="True" Width="15" Height="15" Visibility="Collapsed" VerticalAlignment="Center"/>
                            <ContentPresenter Margin="7,0,0,0" TextElement.Foreground="#323232" x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="static1" Property="Visibility" Value="Collapsed"></Setter>
                            <Setter TargetName="static2" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>